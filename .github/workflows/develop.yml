on:
  push:
    branches: [test-deploy]

  workflow_dispatch:
    inputs:
      deploy:
        description: 'Do deploy'
        required: true
        default: false

jobs:
  build_image:
    runs-on: ubuntu-20.04
    if: false
    steps:
      - uses: actions/checkout@v2
      - name: Check Dockerhub credentials
        run: |
          set -x
          test -n "${{ secrets.DOCKERHUB_USERNAME }}"
          test -n "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          github-token: ${{ secrets.DOCKERHUB_TOKEN }}
          tags: robdrynkin/lambda-board:develop
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    #needs: build_image
    runs-on: ubuntu-20.04
    if: ${{ github.event.inputs.deploy }}
    steps:
      - uses: actions/checkout@v2
      - name: Check credentials
        run: |
          set -x
          test -n "${{ secrets.DEPLOY_KEY }}"
          test -n "${{ secrets.DEPLOY_HOST }}"
          test -n "${{ secrets.DOMAIN }}"
          test -n "${{ secrets.EMAIL }}"

      - uses: shimataro/ssh-key-action@v2
        with:
          key: "${{ secrets.DEPLOY_KEY }}"
          known_hosts: 'known_hosts'

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.DOMAIN }} >> ~/.ssh/known_hosts

      - name: Deploy board
        run: docker-compose pull && docker-compose down && docker-compose up -d
        working-directory: deploy
        env:
          DOCKER_HOST: "ssh://${{ secrets.DEPLOY_HOST }}"
          DOMAIN: "${{ secrets.DOMAIN }}"
          EMAIL: "${{ secrets.EMAIL }}"
          TAG: develop
